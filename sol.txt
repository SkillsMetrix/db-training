package com.model;

import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class EmployeeUtils {

	public static List<Employee> filterEmployee(List<Employee> employees,Predicate<Employee> condition){
		return employees.stream().filter(condition).collect(Collectors.toList());
	}
}


-------------


package com.model;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

public class EmployeeTest {
	
	private static List<Employee> empList;
	
	static void steup() {
		empList=Arrays.asList(
				
				new Employee(101, "dem", LocalDate.of(1990, 6, 10), 23456.00,LocalTime.of(9,0)),
				new Employee(102, "sam", LocalDate.of(1985, 3, 20), 99456.00,LocalTime.of(8,45)),
				new Employee(103, "david", LocalDate.of(2000, 1, 15), 23006.00,LocalTime.of(9,15)),
				new Employee(104, "bob", LocalDate.of(1995, 8, 30), 99459.00,LocalTime.of(10,0))
				);
				
	}

}


--------------

package com.model;

 

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

public class EmployeeTest {
	
	private static List<Employee> empList;
	
	@BeforeAll
	static void steUp() {
		empList=Arrays.asList(
				
				new Employee(101, "dem", LocalDate.of(1990, 6, 10), 23456.00,LocalTime.of(9,0)),
				new Employee(102, "sam", LocalDate.of(1985, 3, 20), 99456.00,LocalTime.of(8,45)),
				new Employee(103, "david", LocalDate.of(2000, 1, 15), 23006.00,LocalTime.of(9,15)),
				new Employee(104, "bob", LocalDate.of(1995, 8, 30), 99459.00,LocalTime.of(10,0))
				);
				
	}
	@Test
	void testFilterBySalary() {
		List<Employee> result= EmployeeUtils.filterEmployee(empList, e ->e.getSalary() > 90000);
		assertEquals(2, result.size());
	}

}
